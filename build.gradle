/*
 * xnat-template-plugin: build.gradle
 * XNAT https://www.xnat.org
 * Copyright (c) 2005-2021, Washington University School of Medicine
 * All Rights Reserved
 *
 * Released under the Simplified BSD.
 */

// TODO: This is the minimum set of Gradle plugins required to build most XNAT plugins.
//       You may include many others, including plugins for testing and test coverage,
//       IDE integration, and more.
plugins {
    id "java"
    id "io.franzbecker.gradle-lombok" version "4.0.0"
    id "io.spring.dependency-management" version "1.0.11.RELEASE"
    id "org.nrg.xnat.build.xnat-data-builder" version "1.8.0"
}

// TODO: Change the group and version to values appropriate for your plugin project.
// NOTE: You should not leave the group value set to "org.nrg.xnatx.plugins"! Use
//       something to indicate who developed the plugin and follow the standard
//       Maven naming conventions: https://maven.apache.org/guides/mini/guide-naming-conventions.html
//       For example, if a group at Miskatonic University developed a plugin, the
//       group might be "edu.miskatonic.imaging.xnat".
group "org.nrg.xnatx.plugins"
version "1.8.0"
description "This project provides a template for developing a plugin for XNAT 1.8"

// TODO: This provides access to all of these repositories for dependency resolution.
repositories {
    mavenLocal()
    maven { url "https://www.dcm4che.org/maven2" }
    mavenCentral()
    maven { url "https://nrgxnat.jfrog.io/nrgxnat/libs-release" }
    maven { url "https://nrgxnat.jfrog.io/nrgxnat/libs-snapshot" }
}

// TODO: This defines a dependency package, specifically the XNAT NRG parent pom, which specifies
//       versions for all of XNAT's dependencies. This helps ensure that plugins are building
//       against the same versions of various libraries as XNAT itself.
dependencyManagement.imports {
    mavenBom "org.nrg:parent:${project.version}"
}

// TODO: This is a pretty minimal set of dependencies, so don't worry if you need to add more.
dependencies {
    implementation("org.nrg.xnat:web") {
        transitive = false
    }
    implementation("org.nrg:dicom-xnat-mx") {
        transitive = false
    }
    implementation("org.nrg.xnat:xnat-data-models") {
        transitive = false
    }
    implementation "org.nrg.xdat:core"
    implementation("org.nrg:prefs") {
        transitive = false
    }
    implementation("org.nrg:framework") {
        transitive = false
    }
    implementation "io.springfox:springfox-swagger2"
    implementation "io.springfox:springfox-swagger-ui"
}

// TODO: This configures the compileJava task to call the xnatDataBuilder task before
//       trying to compile any Java code in the plugin. If your plugin includes one or
//       more custom data types, you'll need to generate source code for those datatypes
//       before you can use them in your Java code.
compileJava.dependsOn project.tasks["xnatDataBuilder"]

lombok {
    version = dependencyManagement.importedProperties["lombok.version"] as String
    sha256 = dependencyManagement.importedProperties["lombok.checksum"] as String
}

java {
    // TODO: As of the 1.8.x release, XNAT is built as a Java 8-compatible (i.e. JDK 1.8)
    //       application. All plugins must be 1.8 compatible as well. This does NOT mean
    //       the code must be compiled with Java 8, just that the compiled byte code must
    //       be compatible with running in a Java 8 environment.
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

// TODO: This tells the compiler where to find source code. This isn't required in a
//       standard build, but the XNAT data builder generates code from XNAT data-type
//       schemas that the compiler needs to know about.
sourceSets {
    main {
        java {
            srcDir "build/xnat-generated/src/main/java"
        }
        resources {
            srcDir "build/xnat-generated/src/main/resources"
            exclude {
                // TODO: Schema files get copied over to the generated source folder, which
                //       results in duplicate entries for those files in the plugin jar file.
                //       This exclusion filters those duplicates out.
                "build/xnat-generated/src/main/resources/schemas/**/*.xsd"
            }
        }
    }
}
